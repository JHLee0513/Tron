{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 import java.awt.Dimension;\
import java.awt.Point;\
import java.awt.Toolkit;\
import java.awt.event.ActionEvent;\
import java.awt.event.ActionListener;\
import java.awt.event.KeyEvent;\
import java.awt.event.KeyListener;\
\
import java.util.ArrayList;\
import java.util.Random;\
\
import javax.swing.JFrame;\
import javax.swing.Timer;\
\
public class Snake extends legitintro implements ActionListener, KeyListener\
\{\
	public JFrame jframe;\
	public RenderPanel renderPanel;\
	public Timer timer = new Timer(20, this);\
	public ArrayList<Point> snakeParts = new ArrayList<Point>();\
	public ArrayList<Point> EsnakeParts = new ArrayList<Point>();\
	public static final int UP = 0, DOWN = 1, LEFT = 2, RIGHT = 3, SCALE = 10;\
	public int ticks = 0, direction = DOWN, tailLength = 10, time;\
	//Everything regarding AI has "E" in front of the variable name. \
	private int Edirection = UP;\
	private Point head,Ehead;\
	public Random random;\
	private boolean over = false, paused = false;\
	private boolean win = false;\
	private int Rscore = 0;\
	private int Bscore = 0;\
	\
	public Snake()\
	\{\
		dim = Toolkit.getDefaultToolkit().getScreenSize();\
		jframe = new JFrame("Player vs player");\
		jframe.setVisible(true);\
		jframe.setSize(805, 700);\
		jframe.setResizable(false);\
		jframe.setLocation(dim.width / 2 - jframe.getWidth() / 2, dim.height / 2 - jframe.getHeight() / 2);\
		jframe.add(renderPanel = new RenderPanel());\
		jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\
		jframe.addKeyListener(this);\
		startGame();\
	\}\
	\
	public boolean GetresultOver() \{\
			return over;\
	\}\
	\
	public boolean GetresultWin()\{\
		return win;\
	\}\
	\
	public Point Gethead() \{\
		return head;\
	\}\
	\
	public Point GetEhead() \{\
		return Ehead;\
	\}\
	\
	public int GetBscore() \{\
		return Bscore;\
	\}\
	\
	public int GetRscore() \{\
		return Rscore;\
	\}\
	\
	public boolean Getpause()\{\
		return paused;\
	\}\
	\
	public void startGame()\
	\{\
		over = false;\
		paused = false;\
		win = false;\
		time = 0;\
		tailLength = 14;\
		ticks = 0;\
		direction = DOWN;\
		Edirection = UP;\
		head = new Point(18, 16);\
		Ehead = new Point(40,45);\
		random = new Random();\
		snakeParts.clear();\
		EsnakeParts.clear();\
		timer.start();\
	\}\
	\
	@Override\
	public void actionPerformed(ActionEvent arg0)\
	\{\
		renderPanel.repaint();\
		ticks++;\
\
		if (ticks % 2 == 0 && head != null && !over && !paused && !win)\
		\{\
			time++;\
\
			snakeParts.add(new Point(head.x, head.y));\
			EsnakeParts.add(new Point(Ehead.x, Ehead.y));\
\
			if (direction == UP)\
			\{\
				if (head.y - 1 >= 0 && noTailAt(head.x, head.y - 1) && EnoTailAt(head.x, head.y-1))\
				\{\
					head = new Point(head.x, head.y - 1);\
				\}\
				else\
				\{\
					over = true;\
					Rscore = Rscore + 1;\
\
				\}\
	\
			\}\
			if(Edirection == UP)\{\
				if (Ehead.y - 1 >= 0 && noTailAt(Ehead.x, Ehead.y - 1)&& EnoTailAt(Ehead.x, Ehead.y-1))\
				\{\
					Ehead = new Point(Ehead.x, Ehead.y - 1);\
				\}\
				else\
				\{\
					win = true;\
					Bscore = Bscore + 1;\
\
				\}\
			\}\
\
			if (direction == DOWN)\
			\{\
				if (head.y + 1 < 67 && noTailAt(head.x, head.y + 1) && EnoTailAt(head.x, head.y+1))\
				\{\
					head = new Point(head.x, head.y + 1);\
				\}\
				else\
				\{\
					over = true;\
					Rscore = Rscore + 1;\
				\}\
				\
			\}\
			if (Edirection == DOWN)\
			\{\
				if (Ehead.y + 1 < 67 && noTailAt(Ehead.x, Ehead.y + 1)&& EnoTailAt(Ehead.x, Ehead.y+1))\
				\{\
					Ehead = new Point(Ehead.x, Ehead.y + 1);\
				\}\
				else\
				\{\
					win = true;\
					Bscore = Bscore + 1;\
				\}\
				\
			\}\
\
			if (direction == LEFT)\
			\{\
				if (head.x - 1 >= 0 && noTailAt(head.x - 1, head.y)&& EnoTailAt(head.x-1, head.y))\
				\{\
					head = new Point(head.x - 1, head.y);\
				\}\
				else\
				\{\
					over = true;\
					Rscore = Rscore + 1;\
				\}\
				\
			\}\
			if (Edirection == LEFT)\
			\{\
				if (Ehead.x - 1 >= 0 && noTailAt(Ehead.x - 1, Ehead.y)&& EnoTailAt(Ehead.x-1, Ehead.y))\
				\{\
					Ehead = new Point(Ehead.x - 1, Ehead.y);\
				\}\
				else\
				\{\
					win = true;\
					Bscore = Bscore + 1;\
				\}\
				\
			\}\
\
			if (direction == RIGHT)\
			\{\
				if (head.x + 1 < 80 && noTailAt(head.x + 1, head.y) && EnoTailAt(head.x + 1, head.y))\
				\{\
					head = new Point(head.x + 1, head.y);\
				\}\
				else\
				\{\
					over = true;\
					Rscore = Rscore + 1;\
				\}\
			\}\
			if (Edirection == RIGHT)\
			\{\
				if (Ehead.x + 1 < 80 && noTailAt(Ehead.x + 1, Ehead.y) && EnoTailAt(Ehead.x+1, Ehead.y))\
				\{\
					Ehead = new Point(Ehead.x + 1, Ehead.y);\
				\}\
				else\
				\{\
					win = true;\
					Bscore = Bscore + 1;\
				\}\
				\
			\}\
					tailLength++;\
				\}		\
			\} 	\
	\
	public boolean noTailAt(int x, int y)\
	\{\
		for (Point point : snakeParts)\
		\{\
			if (point.equals(new Point(x, y)))\
			\{\
				return false;\
			\}\
		\}\
		return true;\
	\}\
	\
	public boolean EnoTailAt(int x, int y)\
	\{\
		for (Point point : EsnakeParts)\
		\{\
			if (point.equals(new Point(x, y)))\
			\{\
				return false;\
			\}\
		\}\
		return true;\
	\}\
\
	@Override\
	public void keyPressed(KeyEvent e)\
	\{\
		int i = e.getKeyCode();\
\
		if ((i == KeyEvent.VK_A) && direction != RIGHT)\
		\{\
			direction = LEFT;\
		\}\
\
		if ((i == KeyEvent.VK_D) && direction != LEFT)\
		\{\
			direction = RIGHT;\
		\}\
\
		if ((i == KeyEvent.VK_W) && direction != DOWN)\
		\{\
			direction = UP;\
		\}\
\
		if ((i == KeyEvent.VK_S) && direction != UP)\
		\{\
			direction = DOWN;\
		\}\
		\
		if ((i == KeyEvent.VK_LEFT) && Edirection != RIGHT)\
		\{\
			Edirection = LEFT;\
		\}\
\
		if (( i == KeyEvent.VK_RIGHT) && Edirection != LEFT)\
		\{\
			Edirection = RIGHT;\
		\}\
\
		if (( i == KeyEvent.VK_UP) && Edirection != DOWN)\
		\{\
			Edirection = UP;\
		\}\
\
		if (( i == KeyEvent.VK_DOWN) && Edirection != UP)\
		\{\
			Edirection = DOWN;\
		\}\
		if (i == KeyEvent.VK_SPACE)\
		\{  \
			if (over || win)\
			\{\
				startGame();\
			\}\
			else\
			\{\
				paused = !paused;\
			\}\
		\}\
	\}	\
\
	@Override\
	public void keyReleased(KeyEvent e)\
	\{\
	\}\
	\
	@Override\
	public void keyTyped(KeyEvent e)\
	\{\
	\}	\
	\
\}\
\
}